<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R을 이용한 퀀트투자 on My New Hugo Site</title>
    <link>http://sjh4773.github.io/tags/r%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%80%80%ED%8A%B8%ED%88%AC%EC%9E%90/</link>
    <description>Recent content in R을 이용한 퀀트투자 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Wed, 24 Mar 2021 22:36:11 +0000</lastBuildDate><atom:link href="http://sjh4773.github.io/tags/r%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%80%80%ED%8A%B8%ED%88%AC%EC%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>금융 속보 크롤링</title>
      <link>http://sjh4773.github.io/post/quant-3/</link>
      <pubDate>Wed, 24 Mar 2021 22:36:11 +0000</pubDate>
      
      <guid>http://sjh4773.github.io/post/quant-3/</guid>
      <description># 금융 속보 크롤링 # 네이버 금융 -&amp;gt; 뉴스 -&amp;gt; 실시간 속보 # 금융 속보의 제목을 추출하는 과정 library(rvest) library(httr) # url 변수에 해당 주소 입력 url = paste0(&amp;#39;https://finance.naver.com/news/news_list.nhn?mode=LSS2D&amp;amp;section_id=101&amp;amp;section_id2=258&amp;#39;) # GET 함수를 이용해 해당 페이지의 내용을 받아 data 변수에 저장 data = GET(url) # 데이터 변수 확인 # Status : 200,즉 데이터가 이상 없이 받아짐 # 인코딩은 EUC-KR 타입 print(data) data_title = data %&amp;gt;% read_html(encoding = &amp;#39;EUC-KR&amp;#39;) %&amp;gt;% # read_html 함수를 통해 해당 페이지의 HTML을 읽어오며, 인코딩은 EUC-KR 설정 html_nodes(&amp;#39;dl&amp;#39;) %&amp;gt;% # html_nodes 함수를 통해 해당 태그를 추출, dl 태그에 해당하는 부분 추출 html_nodes(&amp;#39;.</description>
    </item>
    
    <item>
      <title>getSymbols() 함수를 이용한 API 다운로드</title>
      <link>http://sjh4773.github.io/post/quant-2/</link>
      <pubDate>Tue, 23 Mar 2021 21:23:01 +0000</pubDate>
      
      <guid>http://sjh4773.github.io/post/quant-2/</guid>
      <description># getSymbols() 함수를 이용한 API 다운로드 library(quantmod) getSymbols(&amp;#39;TSLA&amp;#39;) head(TSLA) # TSLA.Open TSLA.High TSLA.Low TSLA.Close TSLA.Volume TSLA.Adjusted # 2010-06-29 3.800 5.000 3.508 4.778 93831500 4.778 # 2010-06-30 5.158 6.084 4.660 4.766 85935500 4.766 # 2010-07-01 5.000 5.184 4.054 4.392 41094000 4.392 # 2010-07-02 4.600 4.620 3.742 3.840 25699000 3.840 # 2010-07-06 4.000 4.000 3.166 3.222 34334500 3.222 # 2010-07-07 3.280 3.326 2.996 3.160 34608500 3.160 # Open : 시가, High: 고가, Low : 저가, # Close : 종가, Volume : 거래량, Adjusted : 배당이 반영된 수정주가 # Ad() 함수를 통해 다운로드한 데이터에서 수정주가만을 선택한 후 # chart_Series() 함수를 이용해 시계열 그래프를 그릴 수도 있다.</description>
    </item>
    
    <item>
      <title>api를 이용한 Quandl 데이터 다운로드</title>
      <link>http://sjh4773.github.io/post/quant/</link>
      <pubDate>Tue, 23 Mar 2021 21:00:15 +0000</pubDate>
      
      <guid>http://sjh4773.github.io/post/quant/</guid>
      <description># API를 이용한 Quandl 데이터 다운로드 # R에서 API 주소를 이용해 직접 데이터를 다운로드 url.aapl = &amp;#34;https://www.quandl.com/api/v3/datasets/WIKI/AAPL/ data.csv?api_key=xw3NU3xLUZ7vZgrz5QnG&amp;#34; data.aapl = read.csv(url.aapl) head(data.aapl) # Date Open High Low Close Volume Ex.Dividend Split.Ratio # 1 2018-03-27 173.68 175.15 166.92 168.340 38962839 0 1 # 2 2018-03-26 168.07 173.10 166.44 172.770 36272617 0 1 # 3 2018-03-23 168.39 169.92 164.94 164.940 40248954 0 1 # 4 2018-03-22 170.00 172.68 168.60 168.845 41051076 0 1 # 5 2018-03-21 175.</description>
    </item>
    
  </channel>
</rss>
